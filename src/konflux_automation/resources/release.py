"""Release resource builder."""
from __future__ import annotations

from typing import Dict, Optional

from pydantic import Field, model_validator

from .base import ResourceDefinition, ResourceModel


class ReleaseConfig(ResourceModel):
    """Configuration for creating a Release."""

    name: Optional[str] = None
    generate_name: Optional[str] = Field(default=None, alias="generateName")
    namespace: Optional[str] = None
    release_plan: str = Field(..., alias="releasePlan")
    snapshot: str
    automated: bool = Field(default=False, description="Marks whether the release was auto-generated by Konflux.")
    author: Optional[str] = Field(default=None, description="User id responsible for creating the release.")
    labels: Dict[str, str] = Field(default_factory=dict)
    annotations: Dict[str, str] = Field(default_factory=dict)
    data: Optional[Dict[str, object]] = None

    @model_validator(mode="after")
    def validate_name(self) -> "ReleaseConfig":
        if not self.name and not self.generate_name:
            raise ValueError("Either 'name' or 'generateName' must be provided for Release resources.")
        return self

    def to_resource(self, default_namespace: Optional[str] = None) -> ResourceDefinition:
        namespace = self.namespace or default_namespace
        if not namespace:
            raise ValueError("Namespace must be provided for Release resources.")

        metadata: Dict[str, object] = {"namespace": namespace}
        if self.name:
            metadata["name"] = self.name
        if self.generate_name:
            metadata["generateName"] = self.generate_name

        label_values: Dict[str, str] = {
            "release.appstudio.openshift.io/automated": str(self.automated).lower(),
        }
        if self.author:
            label_values["release.appstudio.openshift.io/author"] = self.author
        label_values.update(self.labels)
        metadata["labels"] = label_values
        if self.annotations:
            metadata["annotations"] = dict(self.annotations)

        spec: Dict[str, object] = {
            "releasePlan": self.release_plan,
            "snapshot": self.snapshot,
        }
        if self.data:
            spec["data"] = dict(self.data)

        return ResourceDefinition(
            api_version="appstudio.redhat.com/v1alpha1",
            kind="Release",
            metadata=metadata,
            spec=spec,
        )
